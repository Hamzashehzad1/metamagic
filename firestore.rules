/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only
 * access their own data, stored under their respective user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/geminiApiKeys/{geminiApiKeyId}: Stores Gemini API keys.
 * - /users/{userId}/wordpressConnections/{wordPressConnectionId}: Stores WordPress connections.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own data.
 * - Listing of user documents is allowed only for the owner.
 * - Schema validation is relaxed in this prototyping phase to allow for rapid iteration. Only critical fields for authorization are validated.
 *
 * Denormalization for Authorization:
 * The `userId` is used in the path to all subcollections, and documents within those subcollections contain a `userId` field. This enables simple, performant authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile with matching UID.
     * @allow (get, list, update, delete) Signed-in user accesses their own profile.
     * @deny (create) Signed-in user attempts to create a profile with a mismatched UID.
     * @principle Enforces document ownership and relational integrity.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to Gemini API keys for a user.
     * @path /users/{userId}/geminiApiKeys/{geminiApiKeyId}
     * @allow (create) Signed-in user creates an API key under their own user ID.
     * @allow (get, list, update, delete) Signed-in user manages their own API keys.
     * @deny (create) Signed-in user attempts to create an API key under a different user ID.
     * @principle Enforces document ownership and relational integrity.
     */
    match /users/{userId}/geminiApiKeys/{geminiApiKeyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to WordPress connections for a user.
     * @path /users/{userId}/wordpressConnections/{wordPressConnectionId}
     * @allow (create) Signed-in user creates a WordPress connection under their own user ID.
     * @allow (get, list, update, delete) Signed-in user manages their own WordPress connections.
     * @deny (create) Signed-in user attempts to create a WordPress connection under a different user ID.
     * @principle Enforces document ownership and relational integrity.
     */
    match /users/{userId}/wordpressConnections/{wordPressConnectionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}