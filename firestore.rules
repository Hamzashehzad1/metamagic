/**
 * @file Firebase Security Rules for Firestore.
 * @description This ruleset enforces a strict user-ownership model for most data, with an optional admin override for user profile reads.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/geminiApiKeys/{geminiApiKeyId}: Stores Gemini API keys for a user.
 * - /users/{userId}/wordpressConnections/{wordPressConnectionId}: Stores WordPress connection details.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and associated subcollections.
 * - Admins can list all user profiles.
 * - All write operations are protected by authorization checks to prevent unauthorized data modification or deletion.
 * - Data validation is minimal in this prototyping phase, focusing on ownership and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get) - Authenticated user reads their own profile. Admin can read any profile.
     * @allow (update) - Authenticated user updates their own profile.
     * @allow (delete) - Authenticated user deletes their own profile.
     * @deny (create) - Unauthorized user attempts to create a profile for another user.
     * @deny (update) - Unauthorized user attempts to update another user's profile.
     * @deny (delete) - Unauthorized user attempts to delete another user's profile.
     * @principle Enforces document ownership for writes, allows admin read.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to Gemini API keys for a user.
     * @path /users/{userId}/geminiApiKeys/{geminiApiKeyId}
     * @allow (create) - Authenticated user creates a Gemini API key for their own profile.
     * @allow (get) - Authenticated user reads a Gemini API key from their own profile.
     * @allow (update) - Authenticated user updates a Gemini API key in their own profile.
     * @allow (delete) - Authenticated user deletes a Gemini API key from their own profile.
     * @deny (create) - Unauthorized user attempts to create a Gemini API key for another user.
     * @deny (update) - Unauthorized user attempts to update another user's Gemini API key.
     * @deny (delete) - Unauthorized user attempts to delete another user's Gemini API key.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/geminiApiKeys/{geminiApiKeyId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to WordPress connections for a user.
     * @path /users/{userId}/wordpressConnections/{wordPressConnectionId}
     * @allow (create) - Authenticated user creates a WordPress connection for their own profile.
     * @allow (get) - Authenticated user reads a WordPress connection from their own profile.
     * @allow (update) - Authenticated user updates a WordPress connection in their own profile.
     * @allow (delete) - Authenticated user deletes a WordPress connection from their own profile.
     * @deny (create) - Unauthorized user attempts to create a WordPress connection for another user.
     * @deny (update) - Unauthorized user attempts to update another user's WordPress connection.
     * @deny (delete) - Unauthorized user attempts to delete another user's WordPress connection.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wordpressConnections/{wordPressConnectionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}