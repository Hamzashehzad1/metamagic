
'use server';

/**
 * @fileOverview A flow for upscaling an image using a generative model.
 *
 * - upscaleImage - A function that handles the image upscaling process.
 * - UpscaleImageInput - The input type for the upscaleImage function.
 * - UpscaleImageOutput - The return type for the upscaleImage function.
 */

import {ai} from '@/ai/genkit';
import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';
import {z} from 'genkit';

const UpscaleImageInputSchema = z.object({
  apiKey: z.string().describe('The user\'s Gemini API key.'),
  photoDataUri: z
    .string()
    .describe(
      "A photo to upscale, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type UpscaleImageInput = z.infer<typeof UpscaleImageInputSchema>;

const UpscaleImageOutputSchema = z.object({
  upscaledPhotoDataUri: z
    .string()
    .describe(
      "The upscaled photo, as a data URI that must include a MIME type and use Base64 encoding."
    ),
});
export type UpscaleImageOutput = z.infer<typeof UpscaleImageOutputSchema>;


export async function upscaleImage(input: UpscaleImageInput): Promise<UpscaleImageOutput> {
  return upscaleImageFlow(input);
}

const upscaleImageFlow = ai.defineFlow(
  {
    name: 'upscaleImageFlow',
    inputSchema: UpscaleImageInputSchema,
    outputSchema: UpscaleImageOutputSchema,
  },
  async (input) => {
    const { apiKey, photoDataUri } = input;
    
    const client = genkit({
      plugins: [googleAI({ apiKey })],
    });

    try {
        const {media} = await client.generate({
            model: 'googleai/gemini-2.0-flash-preview-image-generation',
            prompt: [
                {media: {url: photoDataUri}},
                {text: 'Upscale this image, enhancing its resolution and details. If there are faces, make them clearer and more realistic.'},
            ],
            config: {
                responseModalities: ['TEXT', 'IMAGE'],
            },
        });

        if (!media || !media.url) {
            throw new Error('No image was generated by the model.');
        }

        return { upscaledPhotoDataUri: media.url };

    } catch(error) {
        console.error("Error calling generative model:", error);
        throw new Error("Failed to upscale image via generative AI service.");
    }
  }
);
